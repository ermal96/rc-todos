{"ast":null,"code":"import React,{useEffect}from'react';import Layout from'./containers/Layout';import Login from'./containers/auth/Login';import Register from'./containers/auth/Register';import Logout from'./containers/auth/Logout';import{BrowserRouter as Router,Switch}from\"react-router-dom\";import PrivateRoute from'./components/routes/PrivateRoute';import PublicRoute from'./components/routes/PublicRoute';import*as ROUTES from'./constants/routes';import{connect}from'react-redux';import{initFirebase}from'./store/actions/authActions';import Loader from'./components/styled/Loader';import Profile from'./containers/profile/Profile';import ActiveTodos from'./containers/todos/ActiveTodos';import AllTodos from'./containers/todos/AllTodos';import CompletedTodos from'./containers/todos/CompletedTodos';var App=function App(_ref){var initFirebase=_ref.initFirebase,isFirebaseloaded=_ref.isFirebaseloaded;useEffect(function(){initFirebase();},[initFirebase]);if(isFirebaseloaded){return/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(PrivateRoute,{exact:true,path:ROUTES.HOME,component:AllTodos}),/*#__PURE__*/React.createElement(PrivateRoute,{exact:true,path:ROUTES.ACTIVE,component:ActiveTodos}),/*#__PURE__*/React.createElement(PrivateRoute,{exact:true,path:ROUTES.COMPLETED,component:CompletedTodos}),/*#__PURE__*/React.createElement(PrivateRoute,{exact:true,path:ROUTES.PROFILE,component:Profile}),/*#__PURE__*/React.createElement(PublicRoute,{exact:true,path:ROUTES.LOGIN,component:Login}),/*#__PURE__*/React.createElement(PublicRoute,{exact:true,path:ROUTES.REGISTER,component:Register}),/*#__PURE__*/React.createElement(PrivateRoute,{exact:true,path:ROUTES.LOGOUT,component:Logout}))));}else{return/*#__PURE__*/React.createElement(Loader,null);}};var mapStateToProps=function mapStateToProps(ref){return{isFirebaseloaded:ref.firebase.isFirebaseloaded};};export default connect(mapStateToProps,{initFirebase:initFirebase})(App);","map":{"version":3,"sources":["/home/ermal/Documents/Personal/Projects/rc-todo/src/App.js"],"names":["React","useEffect","Layout","Login","Register","Logout","BrowserRouter","Router","Switch","PrivateRoute","PublicRoute","ROUTES","connect","initFirebase","Loader","Profile","ActiveTodos","AllTodos","CompletedTodos","App","isFirebaseloaded","HOME","ACTIVE","COMPLETED","PROFILE","LOGIN","REGISTER","LOGOUT","mapStateToProps","ref","firebase"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,yBAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,OAAQC,aAAa,GAAIC,CAAAA,MAAzB,CAAiCC,MAAjC,KAA8C,kBAA9C,CACA,MAAOC,CAAAA,YAAP,KAA0B,kCAA1B,CACA,MAAOC,CAAAA,WAAP,KAAyB,iCAAzB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,oBAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,YAAT,KAA6B,6BAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,8BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gCAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,6BAArB,CACA,MAAOC,CAAAA,cAAP,KAA2B,mCAA3B,CAGA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAsC,IAApCN,CAAAA,YAAoC,MAApCA,YAAoC,CAAtBO,gBAAsB,MAAtBA,gBAAsB,CAE9CnB,SAAS,CAAC,UAAM,CACZY,YAAY,GACf,CAFQ,CAEN,CAACA,YAAD,CAFM,CAAT,CAIA,GAAGO,gBAAH,CAAoB,CAChB,mBACI,oBAAC,MAAD,mBACI,oBAAC,MAAD,mBACK,oBAAC,MAAD,mBAEG,oBAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,IAAI,CAAET,MAAM,CAACU,IAAjC,CAAuC,SAAS,CAAEJ,QAAlD,EAFH,cAIG,oBAAC,YAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEN,MAAM,CAACW,MAAlC,CAA0C,SAAS,CAAEN,WAArD,EAJH,cAMG,oBAAC,YAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEL,MAAM,CAACY,SAAlC,CAA6C,SAAS,CAAEL,cAAxD,EANH,cAQG,oBAAC,YAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEP,MAAM,CAACa,OAAlC,CAA2C,SAAS,CAAET,OAAtD,EARH,cAUG,oBAAC,WAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEJ,MAAM,CAACc,KAAlC,CAAyC,SAAS,CAAEtB,KAApD,EAVH,cAYG,oBAAC,WAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEQ,MAAM,CAACe,QAAlC,CAA4C,SAAS,CAAEtB,QAAvD,EAZH,cAcG,oBAAC,YAAD,EAAe,KAAK,KAApB,CAAqB,IAAI,CAAEO,MAAM,CAACgB,MAAlC,CAA0C,SAAS,CAAEtB,MAArD,EAdH,CADL,CADJ,CADJ,CAwBH,CAzBD,IAyBK,CACD,mBACG,oBAAC,MAAD,MADH,CAGH,CAEJ,CArCD,CAuCA,GAAMuB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,GAAD,CAAS,CAC7B,MAAO,CACHT,gBAAgB,CAAES,GAAG,CAACC,QAAJ,CAAaV,gBAD5B,CAAP,CAGH,CAJD,CAMA,cAAeR,CAAAA,OAAO,CAACgB,eAAD,CAAkB,CAACf,YAAY,CAAZA,YAAD,CAAlB,CAAP,CAAyCM,GAAzC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Layout from './containers/Layout';\nimport Login from './containers/auth/Login';\nimport Register from './containers/auth/Register';\nimport Logout from './containers/auth/Logout'\nimport {BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport PrivateRoute  from './components/routes/PrivateRoute'\nimport PublicRoute  from './components/routes/PublicRoute'\nimport * as ROUTES from './constants/routes'\nimport { connect } from 'react-redux';\nimport { initFirebase } from './store/actions/authActions';\nimport Loader from './components/styled/Loader';\n\nimport Profile from './containers/profile/Profile'\nimport ActiveTodos from './containers/todos/ActiveTodos';\nimport AllTodos from './containers/todos/AllTodos';\nimport CompletedTodos from './containers/todos/CompletedTodos';\n\n\nconst App = ({initFirebase, isFirebaseloaded}) => {\n\n    useEffect(() => {\n        initFirebase()\n    }, [initFirebase])\n\n    if(isFirebaseloaded){\n        return (\n            <Router>\n                <Layout>\n                     <Switch>\n\n                        <PrivateRoute exact path={ROUTES.HOME} component={AllTodos} />\n\n                        <PrivateRoute  exact path={ROUTES.ACTIVE} component={ActiveTodos} />\n                        \n                        <PrivateRoute  exact path={ROUTES.COMPLETED} component={CompletedTodos} />\n\n                        <PrivateRoute  exact path={ROUTES.PROFILE} component={Profile} />\n                        \n                        <PublicRoute   exact path={ROUTES.LOGIN} component={Login} />\n                            \n                        <PublicRoute   exact path={ROUTES.REGISTER} component={Register} />\n                        \n                        <PrivateRoute  exact path={ROUTES.LOGOUT} component={Logout} />  \n                        {/* <Redirect path={ROUTES.HOME} component={AllTodos} /> */}\n\n                     </Switch>   \n                </Layout>\n            </Router>\n        );\n    }else{\n        return(\n           <Loader />\n        )\n    }\n \n}\n\nconst mapStateToProps = (ref) => {\n    return {\n        isFirebaseloaded: ref.firebase.isFirebaseloaded\n    }\n}\n\nexport default connect(mapStateToProps, {initFirebase})(App)\n"]},"metadata":{},"sourceType":"module"}