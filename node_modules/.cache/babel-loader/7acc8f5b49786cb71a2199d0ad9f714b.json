{"ast":null,"code":"import { Firestore } from '../../config/firebase';\nimport { types } from './actionTypes';\nimport { SuccessMsg, ErrorMsg } from '../../utils/msg'; // Add Todo\n\nexport const addTodo = newToDo => async dispatch => {\n  Firestore.collection('todos').add(newToDo).then(docRef => {\n    let data = null;\n    data = { ...newToDo,\n      id: docRef.id\n    };\n    dispatch({\n      type: types.ADD_TODO,\n      todo: data\n    });\n    SuccessMsg('Added successfully');\n  });\n}; // Remove Todo\n\nexport const removeTodo = id => async dispatch => {\n  Firestore.collection('todos').doc(id).delete().then(() => {\n    SuccessMsg('Deleted successfully');\n    dispatch({\n      type: types.DELETE_TODO,\n      id: id\n    });\n  }).catch(() => {\n    ErrorMsg('Something went wrong please try again later');\n  });\n}; // Move Todo\n\nexport const moveTodo = (id, bool) => async dispatch => {\n  Firestore.collection('todos').doc(id).update({\n    completed: bool\n  }).then(() => {\n    if (bool) {\n      SuccessMsg('Moved to completed ');\n    } else {\n      SuccessMsg('Moved to todo ');\n    }\n\n    dispatch({\n      type: types.MOVE_TODO,\n      id: id\n    });\n  }).catch(() => {\n    ErrorMsg('Something went wrong please try again later');\n  });\n}; // Set Active Component\n\nexport const activeComponent = component => async dispatch => {\n  dispatch({\n    type: types.ACTIVE_COMPONENT,\n    activeComponent: component\n  });\n}; // Fetch active todos from firebase\n\nexport const fetchTodos = status => async dispatch => {\n  let data = [];\n  Firestore.collection('todos').where(\"completed\", \"==\", status).orderBy('date', 'desc').get().then(res => {\n    res.forEach(item => {\n      const doc = { ...item.data(),\n        id: item.id\n      };\n      data.push(doc);\n    });\n    dispatch({\n      type: types.FETCH_TODOS,\n      todos: data,\n      loading: false\n    });\n  });\n};","map":{"version":3,"sources":["/home/ermal/Documents/Personal/Projects/rc-todo/src/store/actions/todosActions.js"],"names":["Firestore","types","SuccessMsg","ErrorMsg","addTodo","newToDo","dispatch","collection","add","then","docRef","data","id","type","ADD_TODO","todo","removeTodo","doc","delete","DELETE_TODO","catch","moveTodo","bool","update","completed","MOVE_TODO","activeComponent","component","ACTIVE_COMPONENT","fetchTodos","status","where","orderBy","get","res","forEach","item","push","FETCH_TODOS","todos","loading"],"mappings":"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","sourcesContent":["import {Firestore} from '../../config/firebase'\nimport {types} from './actionTypes';\nimport {SuccessMsg, ErrorMsg} from '../../utils/msg'\n\n// Add Todo\nexport const addTodo = newToDo => async dispatch => {\n    Firestore.collection('todos').add(newToDo).then(docRef => {\n\n        let data = null\n        data = {\n            ...newToDo,\n            id: docRef.id\n        }\n        dispatch({type: types.ADD_TODO, todo: data});\n\n        SuccessMsg('Added successfully')\n\n    })\n\n};\n\n\n// Remove Todo\nexport const removeTodo = id => async dispatch => {\n    Firestore.collection('todos').doc(id).delete().then(() => {\n        SuccessMsg('Deleted successfully')\n        dispatch({type: types.DELETE_TODO, id: id});\n    }).catch(() => {\n        ErrorMsg('Something went wrong please try again later')\n    });\n\n\n};\n\n\n// Move Todo\nexport const moveTodo = (id, bool) => async dispatch => {\n    Firestore.collection('todos').doc(id).update({completed: bool}).then(() => {\n        if (bool) {\n            SuccessMsg('Moved to completed ')\n        } else {\n            SuccessMsg('Moved to todo ')\n        }\n        dispatch({type: types.MOVE_TODO, id: id})\n    }).catch(() => {\n        ErrorMsg('Something went wrong please try again later')\n    });\n};\n\n\n// Set Active Component\nexport const activeComponent = (component) => async dispatch => {\n    dispatch({type: types.ACTIVE_COMPONENT, activeComponent: component});\n};\n\n\n// Fetch active todos from firebase\nexport const fetchTodos = (status) => async dispatch => {\n\n    let data = [];\n\n    Firestore.collection('todos').where(\"completed\", \"==\", status).orderBy('date', 'desc').get().then(res => {\n\n        res.forEach(item => {\n            const doc = {\n                ...item.data(),\n                id: item.id\n            };\n            data.push(doc);\n\n        })\n\n        dispatch({type: types.FETCH_TODOS, todos: data, loading: false});\n\n    })\n\n};\n"]},"metadata":{},"sourceType":"module"}