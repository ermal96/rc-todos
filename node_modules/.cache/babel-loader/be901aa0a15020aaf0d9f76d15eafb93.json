{"ast":null,"code":"var _jsxFileName = \"/home/ermal/Documents/Personal/Projects/rc-todo/src/components/todos/TodoList.js\";\nimport React from 'react';\nimport { List, Tag } from 'antd';\nimport { connect } from 'react-redux';\nimport { removeTodo, moveTodo } from '../../store/actions/todosActions';\nimport RemoveTodo from '../../utils/todos/removeTodo';\nimport MoveTodo from '../../utils/todos/moveTodo';\nimport styled from 'styled-components';\nimport { useLocation } from \"react-router-dom\";\nimport { TODOS } from '../../constants/routes';\nconst TodoListWrapper = styled.div`\n    margin: 2rem 0;\n`;\nconst ListIndex = styled.h4`\n\n    margin-right: 20px;\n    width: 20px;\n    display: flex;\n    height: 20px;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background: #1a90ff;\n    border-radius: 3px;\n    color: #fff;\n    font-size: 13px;\n\n`;\n\nconst TodoList = ({\n  data,\n  moveTodo,\n  removeTodo,\n  loading\n}) => {\n  let location = useLocation();\n  console.log(location.pathname);\n  console.log(TODOS);\n  let path = null;\n\n  if (location.pathname === TODOS) {\n    path = 'all';\n  } else {\n    path = '';\n  }\n\n  const renderBtn = item => {\n    if (path === 'all') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MoveTodo, {\n        isActive: item.status,\n        moveTodo: () => moveTodo(item.id, item.status === 'ACTIVE' ? 'COMPLETED' : 'ACTIVE'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 22\n        }\n      }), /*#__PURE__*/React.createElement(RemoveTodo, {\n        deleteTodo: () => removeTodo(item.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(Tag, {\n        color: item.status === 'ACTIVE' ? 'red' : 'green',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, item.status);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TodoListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    loading: loading,\n    itemLayout: \"horizontal\",\n    dataSource: data,\n    renderItem: (item, index) => /*#__PURE__*/React.createElement(List.Item, {\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListIndex, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, index + 1), /*#__PURE__*/React.createElement(List.Item.Meta, {\n      title: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }), renderBtn(item)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = ref => {\n  return {\n    loading: ref.todos.loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeTodo,\n  moveTodo\n})(TodoList);","map":{"version":3,"sources":["/home/ermal/Documents/Personal/Projects/rc-todo/src/components/todos/TodoList.js"],"names":["React","List","Tag","connect","removeTodo","moveTodo","RemoveTodo","MoveTodo","styled","useLocation","TODOS","TodoListWrapper","div","ListIndex","h4","TodoList","data","loading","location","console","log","pathname","path","renderBtn","item","status","id","index","name","mapStateToProps","ref","todos"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {List, Tag} from 'antd';\nimport {connect} from 'react-redux';\nimport {removeTodo, moveTodo} from '../../store/actions/todosActions';\nimport RemoveTodo from '../../utils/todos/removeTodo';\nimport MoveTodo from '../../utils/todos/moveTodo';\nimport styled from 'styled-components'\nimport { useLocation } from \"react-router-dom\";\nimport { TODOS } from '../../constants/routes'\n\nconst TodoListWrapper = styled.div`\n    margin: 2rem 0;\n`;\n\nconst ListIndex = styled.h4`\n\n    margin-right: 20px;\n    width: 20px;\n    display: flex;\n    height: 20px;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background: #1a90ff;\n    border-radius: 3px;\n    color: #fff;\n    font-size: 13px;\n\n`;\n\nconst TodoList = ({\n    data,\n    moveTodo,\n    removeTodo,\n    loading\n}) => {\n\n    let location = useLocation();\n\n    console.log(location.pathname)\n    console.log(TODOS)\n\n    let path = null;\n\n    if(location.pathname === TODOS){\n        path = 'all'\n    }else{\n        path = ''\n    }\n\n    const renderBtn = (item) => {\n        if(path === 'all'){\n            return(\n                <>\n                     <MoveTodo \n                            isActive={item.status} \n                            moveTodo={ () => moveTodo(item.id, item.status  === 'ACTIVE' ? 'COMPLETED': 'ACTIVE') }/>\n                     <RemoveTodo \n                            deleteTodo={ () => removeTodo(item.id) }/>\n                </>\n            )\n        }else {\n            return(\n                <Tag color={item.status === 'ACTIVE' ? 'red': 'green' }>{item.status}</Tag>\n            )\n        }\n    }\n\n    return (\n        <TodoListWrapper >\n            <List   \n                loading={loading}\n                itemLayout=\"horizontal\"\n                dataSource={data}\n                renderItem={\n                    (item, index) => (\n                        <List.Item key={\n                            item.id\n                        }>\n                            <ListIndex>{index + 1}</ListIndex>\n                            <List.Item.Meta title={\n                                item.name\n                            }/>\n                            {renderBtn(item)}\n                        </List.Item>\n                    )\n                }/>\n        </TodoListWrapper>\n    )\n}\n\nconst mapStateToProps = (ref) => {\n    return { loading: ref.todos.loading};\n}\n\n\nexport default connect(mapStateToProps, {removeTodo, moveTodo})(TodoList)\n"]},"metadata":{},"sourceType":"module"}