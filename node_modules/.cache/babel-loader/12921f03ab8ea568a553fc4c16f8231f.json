{"ast":null,"code":"import { Firestore } from '../../config/firebase';\nimport { types } from './actionTypes';\nimport { SuccessMsg, ErrorMsg } from '../../utils/helpers/msg'; // Add Todo\n\nexport const addTodo = newToDo => async dispatch => {\n  dispatch({\n    type: types.ADD_TODO //payload: true\n\n  });\n  Firestore.collection('todos').add(newToDo).then(docRef => {\n    let data = null;\n    data = { ...newToDo,\n      id: docRef.id\n    };\n    dispatch({\n      type: types.ADD_TODO,\n      todo: data //payload: false\n\n    });\n    SuccessMsg('Added successfully');\n  }).catch(err => {\n    ErrorMsg(err.message);\n  });\n}; // Remove Todo\n\nexport const removeTodo = id => async dispatch => {\n  Firestore.collection('todos').doc(id).delete().then(() => {\n    SuccessMsg('Deleted successfully');\n    dispatch({\n      type: types.DELETE_TODO,\n      id: id\n    });\n  }).catch(err => {\n    ErrorMsg(err.message);\n  });\n}; // Move Todo\n\nexport const moveTodo = (id, bool) => async dispatch => {\n  Firestore.collection('todos').doc(id).update({\n    completed: bool\n  }).then(() => {\n    if (bool) {\n      SuccessMsg('Moved to completed ');\n    } else {\n      SuccessMsg('Moved to todo ');\n    }\n\n    dispatch({\n      type: types.MOVE_TODO,\n      id: id\n    });\n  }).catch(err => {\n    ErrorMsg(err.message);\n  });\n}; // Set Active Component\n\nexport const activeComponent = component => async dispatch => {\n  dispatch({\n    type: types.ACTIVE_COMPONENT,\n    activeComponent: component\n  });\n}; // Fetch active todos from firebase\n\nexport const fetchTodos = status => async (dispatch, getState) => {\n  let data = [];\n  const userId = getState().firebase.user.uid;\n  Firestore.collection('todos').where(\"completed\", \"==\", status).where(\"userId\", \"==\", userId).orderBy('date', 'desc').get().then(res => {\n    res.forEach(item => {\n      const doc = { ...item.data(),\n        id: item.id\n      };\n      data.push(doc);\n    });\n    dispatch({\n      type: types.FETCH_TODOS,\n      todos: data,\n      loading: false\n    });\n  });\n};","map":{"version":3,"sources":["/home/ermal/Documents/Personal/Projects/rc-todo/src/store/actions/todosActions.js"],"names":["Firestore","types","SuccessMsg","ErrorMsg","addTodo","newToDo","dispatch","type","ADD_TODO","collection","add","then","docRef","data","id","todo","catch","err","message","removeTodo","doc","delete","DELETE_TODO","moveTodo","bool","update","completed","MOVE_TODO","activeComponent","component","ACTIVE_COMPONENT","fetchTodos","status","getState","userId","firebase","user","uid","where","orderBy","get","res","forEach","item","push","FETCH_TODOS","todos","loading"],"mappings":"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","sourcesContent":["import {Firestore} from '../../config/firebase'\nimport {types} from './actionTypes';\nimport {SuccessMsg, ErrorMsg} from '../../utils/helpers/msg'\n\n// Add Todo\nexport const addTodo = newToDo => async dispatch => {\n\n    dispatch({\n        type: types.ADD_TODO,\n        //payload: true\n    })\n\n    Firestore.collection('todos').add(newToDo).then(docRef => {\n        let data = null\n        data = {\n            ...newToDo,\n            id: docRef.id\n        }\n        dispatch({\n            type: types.ADD_TODO, \n            todo: data,\n            //payload: false\n        });\n\n        SuccessMsg('Added successfully')\n\n    }).catch(err => {\n        ErrorMsg(err.message)\n    })\n\n};\n\n\n// Remove Todo\nexport const removeTodo = id => async dispatch => {\n    Firestore.collection('todos').doc(id).delete().then(() => {\n        SuccessMsg('Deleted successfully')\n        dispatch({type: types.DELETE_TODO, id: id});\n    }).catch((err) => {\n        ErrorMsg(err.message)\n    });\n\n\n};\n\n\n// Move Todo\nexport const moveTodo = (id, bool) => async dispatch => {\n    Firestore.collection('todos').doc(id).update({completed: bool}).then(() => {\n        if (bool) {\n            SuccessMsg('Moved to completed ')\n        } else {\n            SuccessMsg('Moved to todo ')\n        }\n        dispatch({type: types.MOVE_TODO, id: id})\n    }).catch((err) => {\n        ErrorMsg(err.message)\n    });\n};\n\n\n// Set Active Component\nexport const activeComponent = (component) => async dispatch => {\n    dispatch({type: types.ACTIVE_COMPONENT, activeComponent: component});\n};\n\n\n// Fetch active todos from firebase\nexport const fetchTodos = (status) => async (dispatch, getState) => {\n\n    let data = [];\n\n    const userId = getState().firebase.user.uid;\n\n\n    Firestore.collection('todos').where(\"completed\", \"==\", status ).where(\"userId\", \"==\", userId).orderBy('date', 'desc').get().then(res => {\n\n        res.forEach(item => {\n            const doc = {\n                ...item.data(),\n                id: item.id\n            };\n            data.push(doc);\n\n        })\n\n        dispatch({type: types.FETCH_TODOS, todos: data, loading: false});\n\n    })\n\n};\n"]},"metadata":{},"sourceType":"module"}